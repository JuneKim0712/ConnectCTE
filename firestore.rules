rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    allow read, delete, create, update: if false // rejects all permission by default
    // Define rules for the "partners" collection
    match /partners/{docId} {
      allow read: if IsVerifiedVusdEmail() // allow user to read if they are Vusd email (school email)
      allow delete: if IsVerifiedVusdEmail() && IsModerator() // allow the user to read if they are a moderator and vusd email
      allow create, update: if true // isValidPartnerData(request.resource.data) && 
      // IsVerifiedVusdEmail() && IsModerator() // allow update if it fulfills a requirement for delete and if it's valid input

      // verifies if logged in user is vusd email
      function IsVerifiedVusdEmail(){
      return request.auth.token.email.matches('.*vusd[.]us$') &&
      request.auth.token.email_verified;
      }

      // checks if the user is given permission to change documents for partners collection
      function IsModerator() {
      return request.auth.uid in get(/databases/$(database)/documents/roles/SuperModerator).data.id || 
      request.auth.uid in get(/databases/$(database)/documents/roles/Moderator).data.id
      }

      // Function to validate partner data
      function isValidPartnerData(data) {
        return isValidInput(data.name) &&
               isValidType(data.type) &&
               isValidSector(data.sector) &&
               isValidInput(data.resources) &&
               isValidInput(data.individual) &&
               isValidEmail(data.email) &&
               isValidPhone(data.phone) &&
               isValidInput(data.address) &&
               isValidDate(data.date);  
      }
      
      // Validation function for name (must be a string)
      function isValidInput(input) {
        return input is string && input != '';
      }

      // Validation function for type (must be either "Business" or "Community")
      function isValidType(type) {
        return type == 'Business' || type == 'Community';
      }

      // Validation function for sector
      function isValidSector(sector) {
        return sector in ['Technology', 'Healthcare', 'Finance', 'Non-profit',
                          'Energy', 'Environment', 'Arts', 'Entrepreneurship',
                          'Manufacturing', 'Education', 'Other'];
      }

      // Validation function for email (must be a valid email format)
      function isValidEmail(email) {
        return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
      }


      // Validation function for phone (must be in xxx-xxx-xxxx format)
      function isValidPhone(phone) {
        return phone.matches('^\\d{3}-\\d{3}-\\d{4}$');
      }

      // Validation function for date (must be a valid date format)
      function isValidDate(date) {
          return date.matches('^\\d{4}-\\d{2}-\\d{2}$');
      }


    }
  }
}
